import lingo/pegcode/driver;

AlgExp ::= AlgSum, AlgMul, AlgMin, AlgDiv, AlgNeg, AlgInt;
    AlgSum(lhs : AlgExp, rhs : AlgExp);
    AlgMin(lhs : AlgExp, rhs : AlgExp);
    AlgMul(lhs : AlgExp, rhs : AlgExp);
    AlgDiv(lhs : AlgExp, rhs : AlgExp);
    AlgNeg(e : AlgExp);
    AlgInt(val : int);

alg2s(ex : AlgExp) -> string {
    switch (ex) {
        AlgSum(lhs, rhs): "(" + alg2s(lhs) + " + " + alg2s(rhs) + ")";
        AlgMin(lhs, rhs): "(" + alg2s(lhs) + " - " + alg2s(rhs) + ")";
        AlgMul(lhs, rhs): "(" + alg2s(lhs) + " * " + alg2s(rhs) + ")";
        AlgDiv(lhs, rhs): "(" + alg2s(lhs) + " / " + alg2s(rhs) + ")";
        AlgNeg(e): "-" + alg2s(e);
        AlgInt(val): i2s(val);
    }
}

alg2i(ex : AlgExp) -> int {
    switch (ex) {
        AlgSum(lhs, rhs): alg2i(lhs) + alg2i(rhs);
        AlgMul(lhs, rhs): alg2i(lhs) * alg2i(rhs);
        AlgMin(lhs, rhs): alg2i(lhs) - alg2i(rhs);
        AlgDiv(lhs, rhs): alg2i(lhs) / alg2i(rhs);
        AlgNeg(e): -alg2i(e);
        AlgInt(val): val;
    }
}

s2alg(str : string) -> AlgExp {
    e_gr = "#include algebr.lingo";
    parsic(compilePegGrammar(e_gr), str, defaultPegActions)
}

main() {
    tree = s2alg("((1+2)-(1+1))");
    alg2i(tree) |> println;
}